[{"name":"app.R","content":"library(shiny)\r\nlibrary(bslib)\r\n\r\n# Define UI for app that draws a histogram ----\r\nui <- page_sidebar(\r\n\r\n  # App title ----\r\n  title = \"Hello Shiny!\",\r\n\r\n  # Sidebar panel for inputs ----\r\n  sidebar = sidebar(\r\n\r\n    # Input: Slider for the number of bins ----\r\n    sliderInput(\r\n      inputId = \"bins\",\r\n      label = \"Number of bins:\",\r\n      min = 1,\r\n      max = 50,\r\n      value = 30\r\n    )\r\n  ),\r\n\r\n  # Output: Histogram ----\r\n  plotOutput(outputId = \"distPlot\")\r\n)\r\n\r\n# Define server logic required to draw a histogram ----\r\nserver <- function(input, output) {\r\n\r\n  # Histogram of the Old Faithful Geyser Data ----\r\n  # with requested number of bins\r\n  # This expression that generates a histogram is wrapped in a call\r\n  # to renderPlot to indicate that:\r\n  #\r\n  # 1. It is \"reactive\" and therefore should be automatically\r\n  #    re-executed when inputs (input$bins) change\r\n  # 2. Its output type is a plot\r\n  output$distPlot <- renderPlot({\r\n    x <- faithful$waiting\r\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\r\n\r\n    hist(\r\n      x,\r\n      breaks = bins,\r\n      col = \"#75AADB\",\r\n      border = \"white\",\r\n      xlab = \"Waiting time to next eruption (in mins)\",\r\n      main = \"Histogram of waiting times\"\r\n    )\r\n  })\r\n}\r\n\r\n# Create Shiny app ----\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"README.md","content":"# Connectivity Analysis\r\n","type":"text"}]
